/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package SpeakerEvent.service.base;

import SpeakerEvent.model.Speaker_Event;

import SpeakerEvent.service.Speaker_EventLocalService;

import SpeakerEvent.service.persistence.SpeakerPersistence;
import SpeakerEvent.service.persistence.Speaker_EventPersistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the speaker_ event local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link SpeakerEvent.service.impl.Speaker_EventLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SpeakerEvent.service.impl.Speaker_EventLocalServiceImpl
 * @see SpeakerEvent.service.Speaker_EventLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class Speaker_EventLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements Speaker_EventLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link SpeakerEvent.service.Speaker_EventLocalServiceUtil} to access the speaker_ event local service.
	 */

	/**
	 * Adds the speaker_ event to the database. Also notifies the appropriate model listeners.
	 *
	 * @param speaker_Event the speaker_ event
	 * @return the speaker_ event that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Speaker_Event addSpeaker_Event(Speaker_Event speaker_Event) {
		speaker_Event.setNew(true);

		return speaker_EventPersistence.update(speaker_Event);
	}

	/**
	 * Creates a new speaker_ event with the primary key. Does not add the speaker_ event to the database.
	 *
	 * @param id the primary key for the new speaker_ event
	 * @return the new speaker_ event
	 */
	@Override
	public Speaker_Event createSpeaker_Event(long id) {
		return speaker_EventPersistence.create(id);
	}

	/**
	 * Deletes the speaker_ event with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the speaker_ event
	 * @return the speaker_ event that was removed
	 * @throws PortalException if a speaker_ event with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Speaker_Event deleteSpeaker_Event(long id) throws PortalException {
		return speaker_EventPersistence.remove(id);
	}

	/**
	 * Deletes the speaker_ event from the database. Also notifies the appropriate model listeners.
	 *
	 * @param speaker_Event the speaker_ event
	 * @return the speaker_ event that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Speaker_Event deleteSpeaker_Event(Speaker_Event speaker_Event) {
		return speaker_EventPersistence.remove(speaker_Event);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Speaker_Event.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return speaker_EventPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link SpeakerEvent.model.impl.Speaker_EventModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return speaker_EventPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link SpeakerEvent.model.impl.Speaker_EventModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return speaker_EventPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return speaker_EventPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return speaker_EventPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Speaker_Event fetchSpeaker_Event(long id) {
		return speaker_EventPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the speaker_ event with the primary key.
	 *
	 * @param id the primary key of the speaker_ event
	 * @return the speaker_ event
	 * @throws PortalException if a speaker_ event with the primary key could not be found
	 */
	@Override
	public Speaker_Event getSpeaker_Event(long id) throws PortalException {
		return speaker_EventPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(speaker_EventLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Speaker_Event.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(speaker_EventLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Speaker_Event.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(speaker_EventLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Speaker_Event.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return speaker_EventLocalService.deleteSpeaker_Event((Speaker_Event)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return speaker_EventPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the speaker_ events.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link SpeakerEvent.model.impl.Speaker_EventModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of speaker_ events
	 * @param end the upper bound of the range of speaker_ events (not inclusive)
	 * @return the range of speaker_ events
	 */
	@Override
	public List<Speaker_Event> getSpeaker_Events(int start, int end) {
		return speaker_EventPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of speaker_ events.
	 *
	 * @return the number of speaker_ events
	 */
	@Override
	public int getSpeaker_EventsCount() {
		return speaker_EventPersistence.countAll();
	}

	/**
	 * Updates the speaker_ event in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param speaker_Event the speaker_ event
	 * @return the speaker_ event that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Speaker_Event updateSpeaker_Event(Speaker_Event speaker_Event) {
		return speaker_EventPersistence.update(speaker_Event);
	}

	/**
	 * Returns the speaker local service.
	 *
	 * @return the speaker local service
	 */
	public SpeakerEvent.service.SpeakerLocalService getSpeakerLocalService() {
		return speakerLocalService;
	}

	/**
	 * Sets the speaker local service.
	 *
	 * @param speakerLocalService the speaker local service
	 */
	public void setSpeakerLocalService(
		SpeakerEvent.service.SpeakerLocalService speakerLocalService) {
		this.speakerLocalService = speakerLocalService;
	}

	/**
	 * Returns the speaker persistence.
	 *
	 * @return the speaker persistence
	 */
	public SpeakerPersistence getSpeakerPersistence() {
		return speakerPersistence;
	}

	/**
	 * Sets the speaker persistence.
	 *
	 * @param speakerPersistence the speaker persistence
	 */
	public void setSpeakerPersistence(SpeakerPersistence speakerPersistence) {
		this.speakerPersistence = speakerPersistence;
	}

	/**
	 * Returns the speaker_ event local service.
	 *
	 * @return the speaker_ event local service
	 */
	public Speaker_EventLocalService getSpeaker_EventLocalService() {
		return speaker_EventLocalService;
	}

	/**
	 * Sets the speaker_ event local service.
	 *
	 * @param speaker_EventLocalService the speaker_ event local service
	 */
	public void setSpeaker_EventLocalService(
		Speaker_EventLocalService speaker_EventLocalService) {
		this.speaker_EventLocalService = speaker_EventLocalService;
	}

	/**
	 * Returns the speaker_ event persistence.
	 *
	 * @return the speaker_ event persistence
	 */
	public Speaker_EventPersistence getSpeaker_EventPersistence() {
		return speaker_EventPersistence;
	}

	/**
	 * Sets the speaker_ event persistence.
	 *
	 * @param speaker_EventPersistence the speaker_ event persistence
	 */
	public void setSpeaker_EventPersistence(
		Speaker_EventPersistence speaker_EventPersistence) {
		this.speaker_EventPersistence = speaker_EventPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("SpeakerEvent.model.Speaker_Event",
			speaker_EventLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"SpeakerEvent.model.Speaker_Event");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return Speaker_EventLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Speaker_Event.class;
	}

	protected String getModelClassName() {
		return Speaker_Event.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = speaker_EventPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = SpeakerEvent.service.SpeakerLocalService.class)
	protected SpeakerEvent.service.SpeakerLocalService speakerLocalService;
	@BeanReference(type = SpeakerPersistence.class)
	protected SpeakerPersistence speakerPersistence;
	@BeanReference(type = Speaker_EventLocalService.class)
	protected Speaker_EventLocalService speaker_EventLocalService;
	@BeanReference(type = Speaker_EventPersistence.class)
	protected Speaker_EventPersistence speaker_EventPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}