/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package SpeakerEvent.model.impl;

import SpeakerEvent.model.Speaker_Event;
import SpeakerEvent.model.Speaker_EventModel;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Speaker_Event service. Represents a row in the &quot;FOO_Speaker_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Speaker_EventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Speaker_EventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Speaker_EventImpl
 * @see Speaker_Event
 * @see Speaker_EventModel
 * @generated
 */
@ProviderType
public class Speaker_EventModelImpl extends BaseModelImpl<Speaker_Event>
	implements Speaker_EventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a speaker_ event model instance should use the {@link Speaker_Event} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Speaker_Event";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "speakerId", Types.BIGINT },
			{ "eventId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("speakerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_Speaker_Event (id_ LONG not null primary key,speakerId LONG,eventId LONG)";
	public static final String TABLE_SQL_DROP = "drop table FOO_Speaker_Event";
	public static final String ORDER_BY_JPQL = " ORDER BY speaker_Event.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_Speaker_Event.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(SpeakerEvent.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.SpeakerEvent.model.Speaker_Event"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(SpeakerEvent.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.SpeakerEvent.model.Speaker_Event"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(SpeakerEvent.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.SpeakerEvent.model.Speaker_Event"),
			true);
	public static final long EVENTID_COLUMN_BITMASK = 1L;
	public static final long SPEAKERID_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(SpeakerEvent.service.util.ServiceProps.get(
				"lock.expiration.time.SpeakerEvent.model.Speaker_Event"));

	public Speaker_EventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Speaker_Event.class;
	}

	@Override
	public String getModelClassName() {
		return Speaker_Event.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("speakerId", getSpeakerId());
		attributes.put("eventId", getEventId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long speakerId = (Long)attributes.get("speakerId");

		if (speakerId != null) {
			setSpeakerId(speakerId);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getSpeakerId() {
		return _speakerId;
	}

	@Override
	public void setSpeakerId(long speakerId) {
		_columnBitmask |= SPEAKERID_COLUMN_BITMASK;

		if (!_setOriginalSpeakerId) {
			_setOriginalSpeakerId = true;

			_originalSpeakerId = _speakerId;
		}

		_speakerId = speakerId;
	}

	public long getOriginalSpeakerId() {
		return _originalSpeakerId;
	}

	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Speaker_Event.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Speaker_Event toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Speaker_Event)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Speaker_EventImpl speaker_EventImpl = new Speaker_EventImpl();

		speaker_EventImpl.setId(getId());
		speaker_EventImpl.setSpeakerId(getSpeakerId());
		speaker_EventImpl.setEventId(getEventId());

		speaker_EventImpl.resetOriginalValues();

		return speaker_EventImpl;
	}

	@Override
	public int compareTo(Speaker_Event speaker_Event) {
		long primaryKey = speaker_Event.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Speaker_Event)) {
			return false;
		}

		Speaker_Event speaker_Event = (Speaker_Event)obj;

		long primaryKey = speaker_Event.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Speaker_EventModelImpl speaker_EventModelImpl = this;

		speaker_EventModelImpl._originalSpeakerId = speaker_EventModelImpl._speakerId;

		speaker_EventModelImpl._setOriginalSpeakerId = false;

		speaker_EventModelImpl._originalEventId = speaker_EventModelImpl._eventId;

		speaker_EventModelImpl._setOriginalEventId = false;

		speaker_EventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Speaker_Event> toCacheModel() {
		Speaker_EventCacheModel speaker_EventCacheModel = new Speaker_EventCacheModel();

		speaker_EventCacheModel.id = getId();

		speaker_EventCacheModel.speakerId = getSpeakerId();

		speaker_EventCacheModel.eventId = getEventId();

		return speaker_EventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", speakerId=");
		sb.append(getSpeakerId());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("SpeakerEvent.model.Speaker_Event");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>speakerId</column-name><column-value><![CDATA[");
		sb.append(getSpeakerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Speaker_Event.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Speaker_Event.class
		};
	private long _id;
	private long _speakerId;
	private long _originalSpeakerId;
	private boolean _setOriginalSpeakerId;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private long _columnBitmask;
	private Speaker_Event _escapedModel;
}