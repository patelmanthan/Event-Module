/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package SpeakerEvent.model.impl;

import SpeakerEvent.model.Speaker;
import SpeakerEvent.model.SpeakerModel;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Speaker service. Represents a row in the &quot;FOO_Speaker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SpeakerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpeakerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SpeakerImpl
 * @see Speaker
 * @see SpeakerModel
 * @generated
 */
@ProviderType
public class SpeakerModelImpl extends BaseModelImpl<Speaker>
	implements SpeakerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a speaker model instance should use the {@link Speaker} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Speaker";
	public static final Object[][] TABLE_COLUMNS = {
			{ "speakerId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "email", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("speakerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_Speaker (speakerId LONG not null primary key,userId LONG,firstName VARCHAR(75) null,lastName VARCHAR(75) null,email VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FOO_Speaker";
	public static final String ORDER_BY_JPQL = " ORDER BY speaker.speakerId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_Speaker.speakerId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(SpeakerEvent.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.SpeakerEvent.model.Speaker"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(SpeakerEvent.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.SpeakerEvent.model.Speaker"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(SpeakerEvent.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.SpeakerEvent.model.Speaker"),
			true);
	public static final long SPEAKERID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(SpeakerEvent.service.util.ServiceProps.get(
				"lock.expiration.time.SpeakerEvent.model.Speaker"));

	public SpeakerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _speakerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpeakerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _speakerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Speaker.class;
	}

	@Override
	public String getModelClassName() {
		return Speaker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("speakerId", getSpeakerId());
		attributes.put("userId", getUserId());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("email", getEmail());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long speakerId = (Long)attributes.get("speakerId");

		if (speakerId != null) {
			setSpeakerId(speakerId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}
	}

	@Override
	public long getSpeakerId() {
		return _speakerId;
	}

	@Override
	public void setSpeakerId(long speakerId) {
		_columnBitmask = -1L;

		if (!_setOriginalSpeakerId) {
			_setOriginalSpeakerId = true;

			_originalSpeakerId = _speakerId;
		}

		_speakerId = speakerId;
	}

	public long getOriginalSpeakerId() {
		return _originalSpeakerId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Speaker.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Speaker toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Speaker)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpeakerImpl speakerImpl = new SpeakerImpl();

		speakerImpl.setSpeakerId(getSpeakerId());
		speakerImpl.setUserId(getUserId());
		speakerImpl.setFirstName(getFirstName());
		speakerImpl.setLastName(getLastName());
		speakerImpl.setEmail(getEmail());

		speakerImpl.resetOriginalValues();

		return speakerImpl;
	}

	@Override
	public int compareTo(Speaker speaker) {
		int value = 0;

		if (getSpeakerId() < speaker.getSpeakerId()) {
			value = -1;
		}
		else if (getSpeakerId() > speaker.getSpeakerId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Speaker)) {
			return false;
		}

		Speaker speaker = (Speaker)obj;

		long primaryKey = speaker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SpeakerModelImpl speakerModelImpl = this;

		speakerModelImpl._originalSpeakerId = speakerModelImpl._speakerId;

		speakerModelImpl._setOriginalSpeakerId = false;

		speakerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Speaker> toCacheModel() {
		SpeakerCacheModel speakerCacheModel = new SpeakerCacheModel();

		speakerCacheModel.speakerId = getSpeakerId();

		speakerCacheModel.userId = getUserId();

		speakerCacheModel.firstName = getFirstName();

		String firstName = speakerCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			speakerCacheModel.firstName = null;
		}

		speakerCacheModel.lastName = getLastName();

		String lastName = speakerCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			speakerCacheModel.lastName = null;
		}

		speakerCacheModel.email = getEmail();

		String email = speakerCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			speakerCacheModel.email = null;
		}

		return speakerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{speakerId=");
		sb.append(getSpeakerId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("SpeakerEvent.model.Speaker");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>speakerId</column-name><column-value><![CDATA[");
		sb.append(getSpeakerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Speaker.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Speaker.class
		};
	private long _speakerId;
	private long _originalSpeakerId;
	private boolean _setOriginalSpeakerId;
	private long _userId;
	private String _firstName;
	private String _lastName;
	private String _email;
	private long _columnBitmask;
	private Speaker _escapedModel;
}